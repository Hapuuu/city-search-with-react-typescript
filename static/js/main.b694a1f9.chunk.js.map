{"version":3,"sources":["components/Header.tsx","components/Search.tsx","components/Cities.tsx","App.tsx","index.tsx"],"names":["Header","style","fontSize","color","useStyles","makeStyles","theme","createStyles","root","margin","spacing","width","textAlign","paddingBottom","Search","onKeyChange","classes","className","noValidate","autoComplete","TextField","label","variant","placeholder","onChange","event","target","value","InputProps","endAdornment","InputAdornment","position","table","minWidth","Cities","cityList","React","useState","page","setPage","rowsPerPage","setRowsPerPage","length","TableContainer","component","Paper","backgroundColor","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","slice","map","city","index","hover","item","score","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","flexGrow","paper","padding","background","App","cities","setCities","searchQuery","setSearchQuery","citiesArray","filteredCities","Fuse","shouldSort","includeScore","minMatchCharLength","search","useEffect","axios","get","then","response","Object","values","data","country","catch","error","console","log","Grid","container","xs","handleOnInputChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b694a1f9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <h1 style={{ fontSize: '100px', color:'white' }}>Cities</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n        width: '40ch',\r\n      },\r\n      textAlign: 'center',\r\n      paddingBottom: '50px',\r\n      color: 'white'\r\n    },\r\n  }),\r\n);\r\n\r\ntype Props = {\r\n  onKeyChange: any\r\n}\r\n\r\nconst Search: React.FC<Props> = ({onKeyChange}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n\r\n            <form className={classes.root} noValidate autoComplete=\"off\"> \r\n                <TextField \r\n                label=\"Cities\" variant=\"outlined\" placeholder=\"Search for a city\" \r\n                onChange={(event) => onKeyChange(event.target.value)}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SearchIcon />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Fuse from 'fuse.js'\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 200,\r\n  },\r\n});\r\n\r\n\r\n  type Props = {\r\n      cityList: Fuse.FuseResult<string>[],\r\n  }\r\n\r\nconst Cities: React.FC<Props> = ({cityList}) => {\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        setPage(newPage);\r\n    };\r\n    \r\n    const handleChangeRowsPerPage = (\r\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    //  table will only render if something's typed in the textfield\r\n    if (cityList.length!=0) {\r\n        return (\r\n            <div>\r\n                <TableContainer component={Paper} style= {{backgroundColor: 'rgba(256, 256, 256, 0.5)'}}>\r\n                <Table className={classes.table} aria-label=\"city table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">City</TableCell>\r\n                        <TableCell align=\"center\">Score</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                    <TableBody>\r\n                        {cityList.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        .map((city, index) => (\r\n                            <TableRow key={index} hover>\r\n                                <TableCell align=\"center\">{city.item}</TableCell>\r\n                                <TableCell align=\"center\">{city.score}</TableCell>\r\n                            </TableRow>\r\n                        ))}                 \r\n                    </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                rowsPerPageOptions={[5, 10, 20]}\r\n                component=\"div\"\r\n                count={cityList.length}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                rowsPerPage={rowsPerPage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n                </TableContainer>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return (\r\n            <>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Cities\r\n","import Header from './components/Header'\nimport Search from './components/Search'\nimport './App.css';\nimport {useState, useEffect} from 'react';\nimport axios from 'axios'\nimport Fuse from 'fuse.js'\nimport Cities from './components/Cities';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(0,50,20,50),\n      textAlign: 'center',\n      background: 'linear-gradient(to right, #3494e6, #ec6ead)',\n      margin: 100,\n    },\n    \n  }),\n);\n\n// server response interface\ninterface ServerResponse {\n  data: Map<string ,Array<string>>\n}\n\nconst App = () =>{\n  const [cities, setCities] = useState(['']);\n  const [searchQuery, setSearchQuery] = useState('');\n  var citiesArray: string[] = [];\n\n  // fuse for the fuzzy search\n  const fuse = new Fuse(cities,{\n    shouldSort: true,\n    includeScore: true,\n    minMatchCharLength: 2\n  })\n  const filteredCities = fuse.search(searchQuery);\n  const classes = useStyles();\n\n  // fetching data from API\n  useEffect(() => {\n    axios.get<ServerResponse>('https://raw.githubusercontent.com/russ666/all-countries-and-cities-json/master/countries.json')\n    .then(response => {\n      Object.values(response.data).map((country: string[]) => {\n        citiesArray = [...citiesArray,...country];\n      })\n\n    setCities(citiesArray);\n    })\n    .catch((error) => {\n      console.log(error);\n    })\n  }, [])\n\n  //  handling input change\n  const handleOnInputChange =(value: string) =>{\n    setSearchQuery(value);\n  }\n \n  return (\n    <div className={classes.root}>\n      <Grid container spacing={0}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Header/>\n            <Search onKeyChange={(value: string) => handleOnInputChange(value)}/>\n            <Cities cityList = {filteredCities}/>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}